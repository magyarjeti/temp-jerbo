/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
	'\n\tquery fetchArea(\n\t\t$slug: String\n\t\t$competitionSeries: [String!]\n\t\t$competitionStageType: [CompetitionStageType!]\n\t) {\n\t\tarea(slug: $slug) {\n\t\t\t...AreaFields\n\t\t\tcompetitionStages(type: $competitionStageType, competitionSeriesSlug: $competitionSeries) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\ttype\n\t\t\t\t\tstartedAt\n\t\t\t\t\tendedAt\n\t\t\t\t\toutcomes {\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstatistics {\n\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\tvoters\n\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchAreaDocument,
	'\n  query fetchAuthor($slug: String) {\n    author(slug: $slug) {\n      ...AuthorFields\n    }\n  }\n':
		types.FetchAuthorDocument,
	'\n  query fetchCategory($slug: String, $buckets: Mixed!) {\n    category(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...TaxonomyFields\n    }\n  }\n':
		types.FetchCategoryDocument,
	'\n\tquery fetchCompetitionSeriesList($type: [CompetitionSeriesType!]) {\n\t\tcompetitionSeriesList(type: $type) {\n\t\t\tdata {\n\t\t\t\tslug\n\t\t\t\tname\n\t\t\t\tseason\n\t\t\t\ttype\n\t\t\t\tstartedAt\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchCompetitionSeriesListDocument,
	'\n\tquery fetchCompetitionSeries($slug: String) {\n\t\tcompetitionSeries(slug: $slug) {\n\t\t\tid\n\t\t\tname\n\t\t\tshortName\n\t\t\tseason\n\t\t\tslug\n\t\t\tmetas {\n\t\t\t\tkey\n\t\t\t\tvalue\n\t\t\t\t__typename\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t}\n':
		types.FetchCompetitionSeriesDocument,
	'\n\tquery fetchCompetitionsWithResults(\n\t\t$type: [CompetitionType!]\n\t\t$area: AreaFilterInput\n\t\t$competitionStageType: [CompetitionStageType!]\n\t\t$competitionSeries: [String!]\n\t) {\n\t\tcompetitions(type: $type, area: $area, competitionSeriesSlug: $competitionSeries, first: 106) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tshortName\n\t\t\t\tarea {\n\t\t\t\t\tid\n\t\t\t\t\tslug\n\t\t\t\t\ttype\n\t\t\t\t\tshortName\n\t\t\t\t}\n\t\t\t\tcompetitionStages(type: $competitionStageType) {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\ttype\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstatistics {\n\t\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchCompetitionsWithResultsDocument,
	'\n\tquery fetchCompetitor($owner: String, $competitionSeries: [String!]) {\n\t\tcompetitor(owner: $owner, competitionSeries: $competitionSeries) {\n\t\t\tid\n\t\t\toutcomes {\n\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\tvotes\n\t\t\t\t\tpercent\n\t\t\t\t\tletterVotes\n\t\t\t\t\tletterPercent\n\t\t\t\t\tmandate\n\t\t\t\t\tmandatePercent\n\t\t\t\t\tlistMandate\n\t\t\t\t\tlistMandatePercent\n\t\t\t\t\tindividualMandate\n\t\t\t\t\tindividualMandatePercent\n\t\t\t\t}\n\t\t\t}\n\t\t\towner {\n\t\t\t\tid\n\t\t\t\tslug\n\t\t\t\tcolor\n\t\t\t\tshortName\n\t\t\t\tname\n\t\t\t\t... on Organization {\n\t\t\t\t\trelatedCompetitors {\n\t\t\t\t\t\tid\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompetitionStages {\n\t\t\t\t\t\t\tcompetition {\n\t\t\t\t\t\t\t\tarea {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tlongName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmembers {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tphotoUrls\n\t\t\t\toutcome {\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tisWinner\n\t\t\t\t}\n\t\t\t}\n\t\t\tmarkerTeams {\n\t\t\t\tid\n\t\t\t\tslug\n\t\t\t\tcolor\n\t\t\t\tshortName\n\t\t\t\tname\n\t\t\t\t# ... on Organization {\n\t\t\t\t#   markedCompetitors(\n\t\t\t\t#     type: "person"\n\t\t\t\t#     competitionSeries: $competitionSeries\n\t\t\t\t#   ) {\n\t\t\t\t#     id\n\t\t\t\t#     order\n\t\t\t\t#     owner {\n\t\t\t\t#       ... on Human {\n\t\t\t\t#         id\n\t\t\t\t#         name\n\t\t\t\t#         photoUrls\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#     outcomes {\n\t\t\t\t#       ... on PersonListElcetionOutcome {\n\t\t\t\t#         isWinner\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#     markerTeams {\n\t\t\t\t#       id\n\t\t\t\t#       slug\n\t\t\t\t#       color\n\t\t\t\t#       shortName\n\t\t\t\t#       name\n\t\t\t\t#     }\n\t\t\t\t#     competitionStages {\n\t\t\t\t#       competition {\n\t\t\t\t#         area {\n\t\t\t\t#           id\n\t\t\t\t#           slug\n\t\t\t\t#           shortName\n\t\t\t\t#           longName\n\t\t\t\t#         }\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#   }\n\t\t\t\t# }\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchCompetitorDocument,
	'\n  query fetchContent($id: ID, $slug: String, $buckets: Mixed!, $date: Date) {\n    content(\n      id: $id\n      fromBucket: { column: SLUG, operator: IN, value: $buckets }\n      slug: $slug\n      publishedAt: $date\n    ) {\n      id\n      featuredImage {\n        ...MediaItemFields\n        ...ImageFields\n      }\n      # type\n      title\n      body\n      # bodyType\n      slug\n      excerpt\n      # publisher\n      publishedAt\n      createdAt\n      updatedAt\n      authors {\n        ...AuthorFields\n      }\n      # meta\n      categories {\n        ...TaxonomyFields\n      }\n      tags {\n        ...TaxonomyFields\n      }\n      ... on Article {\n        partners {\n          ...PartnerFields\n        }\n      }\n      collections {\n        ...TaxonomyFields\n        picture\n      }\n      bucket {\n        ...BucketFields\n      }\n      counters {\n        name\n        value\n      }\n      options {\n        id\n        key\n        value\n      }\n      url\n      ... on Article {\n        relatedArticles {\n          ...ContentAbstract\n        }\n      }\n      ... on LiveReport {\n        liveArticle {\n          ...ContentAbstract\n        }\n        link\n        highlighted\n      }\n      userHasAccess\n    }\n  }\n':
		types.FetchContentDocument,
	'\n\tquery fetchContents(\n\t\t$buckets: QueryContentsFromBucketWhereHasConditions\n\t\t$types: [ContentType!]\n\t\t$categories: QueryContentsHasCategoryWhereHasConditions\n\t\t$tags: QueryContentsHasTagWhereHasConditions\n\t\t$partners: QueryContentsHasPartnerWhereHasConditions\n\t\t$authors: QueryContentsByAuthorWhereHasConditions\n\t\t$option: ByOptionInput\n\t\t$date: QueryContentsByDateWhereConditions\n\t\t$before: String\n\t\t$after: String\n\t\t$limit: Int\n\t) {\n\t\tcontents(\n\t\t\tbefore: $before\n\t\t\tafter: $after\n\t\t\tfromBucket: $buckets\n\t\t\tbyType: $types\n\t\t\thasCategory: $categories\n\t\t\thasTag: $tags\n\t\t\thasPartner: $partners\n\t\t\tbyAuthor: $authors\n\t\t\tbyDate: $date\n\t\t\tbyOption: $option\n\t\t\torderBy: { column: PUBLISHED_AT, order: DESC }\n\t\t\tfirst: $limit\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\t...CursorPaginationInfoFields\n\t\t\t}\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\t...ContentAbstract\n\t\t\t\t\t... on Article {\n\t\t\t\t\t\tpartners {\n\t\t\t\t\t\t\t...PartnerFields\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchContentsDocument,
	'\n\tquery fetchCounties {\n\t\tareas(first: 20, type: [COUNTY]) {\n\t\t\tdata {\n\t\t\t\t...AreaFields\n\t\t\t\tchilds(type: [CONSTITUENCY]) {\n\t\t\t\t\t...AreaFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchCountiesDocument,
	'\n  query fetchCup($cupId: ID, $slug: String) {\n    cup(id: $cupId, slug: $slug) {\n      id\n      name\n    }\n  }\n':
		types.FetchCupDocument,
	'\n  query fetchDatasets($slug: String, $postProcessors: [String]) {\n    datasets(slug: $slug) {\n      title\n      body(postProcessor: $postProcessors)\n      id\n      updated_at\n    }\n  }\n':
		types.FetchDatasetsDocument,
	'\n\tquery fetchGroup($id: ID!) {\n\t\tcompetition(id: $id) {\n\t\t\t__typename\n\t\t\tid\n\t\t\tname\n\t\t\tstatistics {\n\t\t\t\t... on FootballCompetitionStatistics {\n\t\t\t\t\tstandings {\n\t\t\t\t\t\tdraw\n\t\t\t\t\t\tgoalDifference\n\t\t\t\t\t\tgoalsAgainst\n\t\t\t\t\t\tgoalsScored\n\t\t\t\t\t\tlost\n\t\t\t\t\t\tmatches\n\t\t\t\t\t\tpoints\n\t\t\t\t\t\tposition\n\t\t\t\t\t\trecentForm\n\t\t\t\t\t\tteam {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t}\n\t\t\t\t\t\twon\n\t\t\t\t\t\t__typename\n\t\t\t\t\t}\n\t\t\t\t\t__typename\n\t\t\t\t}\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchGroupDocument,
	'\n\tquery fetchGroups($type: [CompetitionType!], $competitionSeries: [String!]) {\n\t\tcompetitions(type: $type, competitionSeriesSlug: $competitionSeries) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tstatistics {\n\t\t\t\t\t... on FootballCompetitionStatistics {\n\t\t\t\t\t\tstandings {\n\t\t\t\t\t\t\tdraw\n\t\t\t\t\t\t\tgoalDifference\n\t\t\t\t\t\t\tgoalsAgainst\n\t\t\t\t\t\t\tgoalsScored\n\t\t\t\t\t\t\tlost\n\t\t\t\t\t\t\tmatches\n\t\t\t\t\t\t\tpoints\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\trecentForm\n\t\t\t\t\t\t\twon\n\t\t\t\t\t\t\tteam {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twon\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchGroupsDocument,
	'\n\tquery fetchLivereportsStats($id: ID, $buckets: Mixed!, $after: String) {\n\t\tcontent(id: $id, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n\t\t\tid\n\t\t\t... on LiveArticle {\n\t\t\t\treports(\n\t\t\t\t\tafter: $after\n\t\t\t\t\torderBy: [{ column: PUBLISHED_AT, order: DESC }]\n\t\t\t\t\tcursorInclusive: true\n\t\t\t\t) @connection(key: "reportsStats") {\n\t\t\t\t\tpageInfo {\n\t\t\t\t\t\ttotal\n\t\t\t\t\t}\n\t\t\t\t\tliveReportsStats {\n\t\t\t\t\t\thighlighted\n\t\t\t\t\t\tlatestReport\n\t\t\t\t\t\tpostsBehindTheCursor\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchLivereportsStatsDocument,
	'\n  fragment MainpageContentAbstractFields on Content {\n    id\n    ... on Article {\n      ...ContentAbstract\n    }\n    ... on LiveArticle {\n      reports(orderBy: { column: PUBLISHED_AT, order: DESC }) {\n        edges {\n          node {\n            id\n            url\n            title\n            link\n          }\n        }\n      }\n    }\n  }\n':
		types.MainpageContentAbstractFieldsFragmentDoc,
	'\n  query fetchMainpage($id: ID, $slug: String, $blog: QueryMainpageFromBlogWhereHasConditions) {\n    mainpage(id: $id, slug: $slug, fromBlog: $blog) {\n      id\n      slug\n      layout {\n        id\n        name\n        sections {\n          id\n          name\n        }\n      }\n      items {\n        id\n        __typename\n        position\n        layoutSection {\n          id\n          name\n        }\n        display {\n          id\n          slug\n        }\n        options {\n          key\n          value\n        }\n        ... on MainpageItemWithContent {\n          featuredImage {\n            ...MediaItemFields\n            ...ImageFields\n          }\n          content {\n            ...MainpageContentAbstractFields\n          }\n        }\n      }\n    }\n  }\n':
		types.FetchMainpageDocument,
	'\n\tquery FetchMandates($competitionSeries: [String!], $competitionStage: [CompetitionStageType!]) {\n\t\tlist: competitions(\n\t\t\ttype: ELECTION\n\t\t\tarea: { slug: "magyarorszag" }\n\t\t\tcompetitionSeriesSlug: $competitionSeries\n\t\t) {\n\t\t\tdata {\n\t\t\t\tcompetitionStages(type: $competitionStage) {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\ttype\n\t\t\t\t\t\tstartedAt\n\t\t\t\t\t\tendedAt\n\t\t\t\t\t\tstatistics {\n\t\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\t\tvoters\n\t\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\t\tvalidVotesPercentage\n\t\t\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\t\t\tinvalidVotesPercentage\n\t\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\t\tlistMandate\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchMandatesDocument,
	'\n\tquery fetchMatch($id: ID, $slug: String) {\n\t\tcompetitionStage(id: $id, slug: $slug) {\n\t\t\tid\n\t\t\tname\n\t\t\tslug\n\t\t\tdescription\n\t\t\tcompetition {\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tdescription\n\t\t\t\tcompetitionSeries {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t}\n\t\t\tproperties {\n\t\t\t\t... on FootballCompetitionStageProperties {\n\t\t\t\t\tminutes\n\t\t\t\t\textraMinute\n\t\t\t\t\tstatus\n\t\t\t\t\taddedTimeSecondHalf\n\t\t\t\t\taddedTimeFirstHalf\n\t\t\t\t}\n\t\t\t}\n\t\t\tevents {\n\t\t\t\ttype\n\t\t\t\tparticipants {\n\t\t\t\t\trole\n\t\t\t\t\tparticipant {\n\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tproperties {\n\t\t\t\t\tkey\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\ttitle\n\t\t\t\t# happenedAt\n\t\t\t\tdescription\n\t\t\t}\n\t\t\tstatistics {\n\t\t\t\t... on FootballCompetitionStageStatistics {\n\t\t\t\t\tshotsTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsOngoal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsOffgoal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsBlocked {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tcorners {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tfreeKick {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\toffsides {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpassesPercentage {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpassesTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpossessiontime {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tattacksTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tattacksDangerous {\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t\tlocal\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\toutcomes {\n\t\t\t\t... on FootballGroupStageOutcome {\n\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\tscore\n\t\t\t\t\tformation\n\t\t\t\t\tcoach\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayers {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\tnumber\n\t\t\t\t\t\t\tformationPosition\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on FootballKnockOutStageOutcome {\n\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\tpenaltyScore\n\t\t\t\t\tscore\n\t\t\t\t\tformation\n\t\t\t\t\tcoach\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayers {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\tnumber\n\t\t\t\t\t\t\tformationPosition\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlinks {\n\t\t\t\tlink\n\t\t\t\tname\n\t\t\t}\n\t\t\tstartedAt\n\t\t\tendedAt\n\t\t}\n\t}\n':
		types.FetchMatchDocument,
	'\n\tquery fetchMatches(\n\t\t$competitionSeries: [String!]\n\t\t$first: Int\n\t\t$orderBy: [QueryCompetitionStagesOrderByOrderByClause!]\n\t\t$after: DateTimeTz\n\t) {\n\t\tcompetitionStages(\n\t\t\tcompetitionSeries: $competitionSeries\n\t\t\torderBy: $orderBy\n\t\t\tfirst: $first\n\t\t\tafter: $after\n\t\t) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tslug\n\t\t\t\tdescription\n\t\t\t\tcompetition {\n\t\t\t\t\tname\n\t\t\t\t\ttype\n\t\t\t\t\tdescription\n\t\t\t\t\tcompetitionSeries {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tproperties {\n\t\t\t\t\t... on FootballCompetitionStageProperties {\n\t\t\t\t\t\tminutes\n\t\t\t\t\t\textraMinute\n\t\t\t\t\t\tstatus\n\t\t\t\t\t\taddedTimeSecondHalf\n\t\t\t\t\t\taddedTimeFirstHalf\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutcomes {\n\t\t\t\t\t... on FootballGroupStageOutcome {\n\t\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\t\tscore\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on FootballKnockOutStageOutcome {\n\t\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\t\tpenaltyScore\n\t\t\t\t\t\tscore\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlinks {\n\t\t\t\t\tlink\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\tstartedAt\n\t\t\t\tendedAt\n\t\t\t}\n\t\t}\n\t}\n':
		types.FetchMatchesDocument,
	'\n  query fetchMediaItem($id: ID!) {\n    mediaItem(id: $id) {\n      ...MediaItemFields\n      ...ImageFields\n    }\n  }\n':
		types.FetchMediaItemDocument,
	'\n  query fetchPartner($slug: String, $buckets: Mixed!) {\n    partner(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...PartnerFields\n    }\n  }\n':
		types.FetchPartnerDocument,
	'\n  query recommendation($bucket: QueryRecommendationFromBucketWhereHasConditions, $take: Int) {\n    recommendation(fromBucket: $bucket, take: $take) {\n      title\n      url\n      order\n    }\n  }\n':
		types.RecommendationDocument,
	'\n  query fetchStream($except: StreamExcepts) {\n    stream(except: $except) {\n      articles {\n        ...ContentAbstract\n      }\n    }\n  }\n':
		types.FetchStreamDocument,
	'\n  query fetchTag($slug: String, $buckets: Mixed!) {\n    tag(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...TaxonomyFields\n    }\n  }\n':
		types.FetchTagDocument,
	'\n\tfragment AreaFields on Area {\n\t\tid\n\t\ttype\n\t\tslug\n\t\tshortName\n\t\tlongName\n\t\tproperties {\n\t\t\tkey\n\t\t\tvalue\n\t\t}\n\t}\n':
		types.AreaFieldsFragmentDoc,
	'\n  fragment AuthorFields on Author {\n    id\n    name\n    avatar\n    # description\n    slug\n    # email\n    # state\n    # url\n  }\n':
		types.AuthorFieldsFragmentDoc,
	'\n  fragment BucketFields on Bucket {\n    id\n    slug\n    name\n  }\n':
		types.BucketFieldsFragmentDoc,
	'\n\tfragment CompetitionFields on Competition {\n\t\tid\n\t\tname\n\t\tshortName\n\t\ttype\n\t\tarea {\n\t\t\t...AreaFields\n\t\t\tparent(type: COUNTY) {\n\t\t\t\t...AreaFields\n\t\t\t}\n\t\t}\n\t\tcompetitionStages(type: $competitionStageType) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tstartedAt\n\t\t\t\tendedAt\n\t\t\t\toutcomes {\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\tid\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\tisWinner\n\t\t\t\t\t\tpercent\n\t\t\t\t\t\tvotes\n\t\t\t\t\t}\n\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\tmandate\n\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\tvotes\n\t\t\t\t\t\tpercent\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstatistics {\n\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\tvoters\n\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.CompetitionFieldsFragmentDoc,
	'\n  fragment ContentAbstract on Content {\n    id\n    title\n    slug\n    featuredImage {\n      ...MediaItemFields\n      ...ImageFields\n    }\n    excerpt\n    publishedAt\n    createdAt\n    authors {\n      ...AuthorFields\n    }\n    categories {\n      ...TaxonomyFields\n    }\n    # Ez csak a content_type számolás miatt kell, ha az jön a backendtől, nem\n    # kell majd elkérni az összes taget\n    tags {\n      ...TaxonomyFields\n    }\n    collections {\n      ...TaxonomyFields\n      picture\n    }\n    bucket {\n      ...BucketFields\n    }\n    counters {\n      name\n      value\n    }\n    options {\n      key\n      value\n    }\n    ... on Article {\n      partners {\n        ...PartnerFields\n      }\n    }\n    url\n  }\n':
		types.ContentAbstractFragmentDoc,
	'\n  fragment MediaItemFields on MediaItem {\n    id\n    caption\n    author\n    # uploader\n    url\n    creditType\n    sourceLink\n    bucket {\n      ...BucketFields\n    }\n  }\n':
		types.MediaItemFieldsFragmentDoc,
	'\n  fragment ImageFields on Image {\n    url\n    width\n    height\n    variations {\n      url\n      size\n      width\n      height\n    }\n  }\n':
		types.ImageFieldsFragmentDoc,
	'\n  fragment PageInfoFields on PageInfo {\n    count\n    currentPage\n    hasPreviousPage\n    hasNextPage\n    startCursor\n    endCursor\n  }\n':
		types.PageInfoFieldsFragmentDoc,
	'\n  fragment CursorPaginationInfoFields on CursorPaginationInfo {\n    count\n    endCursor\n    hasNextPage\n    hasPreviousPage\n    startCursor\n    total\n  }\n':
		types.CursorPaginationInfoFieldsFragmentDoc,
	'\n  fragment PartnerFields on Partner {\n    id\n    colors\n    description\n    picture\n    name\n    slug\n    tagline\n    url\n  }\n':
		types.PartnerFieldsFragmentDoc,
	'\n  fragment TaxonomyFields on Taxonomy {\n    id\n    slug\n    name\n    description\n    url\n  }\n':
		types.TaxonomyFieldsFragmentDoc,
	'\n  query getContentInviteToken($id: ID!) {\n    contentInviteToken(id: $id) {\n      inviteToken\n    }\n  }\n':
		types.GetContentInviteTokenDocument,
	'\n\tquery search($query: String!, $buckets: QuerySearchFromBucketWhereHasConditions, $after: String) {\n\t\tsearch(type: [ARTICLE], query: $query, fromBucket: $buckets, after: $after) {\n\t\t\tpageInfo {\n\t\t\t\t...PageInfoFields\n\t\t\t}\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\t... on Article {\n\t\t\t\t\t\t...ContentAbstract\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.SearchDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchArea(\n\t\t$slug: String\n\t\t$competitionSeries: [String!]\n\t\t$competitionStageType: [CompetitionStageType!]\n\t) {\n\t\tarea(slug: $slug) {\n\t\t\t...AreaFields\n\t\t\tcompetitionStages(type: $competitionStageType, competitionSeriesSlug: $competitionSeries) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\ttype\n\t\t\t\t\tstartedAt\n\t\t\t\t\tendedAt\n\t\t\t\t\toutcomes {\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstatistics {\n\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\tvoters\n\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchArea(\n\t\t$slug: String\n\t\t$competitionSeries: [String!]\n\t\t$competitionStageType: [CompetitionStageType!]\n\t) {\n\t\tarea(slug: $slug) {\n\t\t\t...AreaFields\n\t\t\tcompetitionStages(type: $competitionStageType, competitionSeriesSlug: $competitionSeries) {\n\t\t\t\tdata {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\ttype\n\t\t\t\t\tstartedAt\n\t\t\t\t\tendedAt\n\t\t\t\t\toutcomes {\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstatistics {\n\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\tvoters\n\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchAuthor($slug: String) {\n    author(slug: $slug) {\n      ...AuthorFields\n    }\n  }\n',
): (typeof documents)['\n  query fetchAuthor($slug: String) {\n    author(slug: $slug) {\n      ...AuthorFields\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchCategory($slug: String, $buckets: Mixed!) {\n    category(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...TaxonomyFields\n    }\n  }\n',
): (typeof documents)['\n  query fetchCategory($slug: String, $buckets: Mixed!) {\n    category(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...TaxonomyFields\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchCompetitionSeriesList($type: [CompetitionSeriesType!]) {\n\t\tcompetitionSeriesList(type: $type) {\n\t\t\tdata {\n\t\t\t\tslug\n\t\t\t\tname\n\t\t\t\tseason\n\t\t\t\ttype\n\t\t\t\tstartedAt\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchCompetitionSeriesList($type: [CompetitionSeriesType!]) {\n\t\tcompetitionSeriesList(type: $type) {\n\t\t\tdata {\n\t\t\t\tslug\n\t\t\t\tname\n\t\t\t\tseason\n\t\t\t\ttype\n\t\t\t\tstartedAt\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchCompetitionSeries($slug: String) {\n\t\tcompetitionSeries(slug: $slug) {\n\t\t\tid\n\t\t\tname\n\t\t\tshortName\n\t\t\tseason\n\t\t\tslug\n\t\t\tmetas {\n\t\t\t\tkey\n\t\t\t\tvalue\n\t\t\t\t__typename\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchCompetitionSeries($slug: String) {\n\t\tcompetitionSeries(slug: $slug) {\n\t\t\tid\n\t\t\tname\n\t\t\tshortName\n\t\t\tseason\n\t\t\tslug\n\t\t\tmetas {\n\t\t\t\tkey\n\t\t\t\tvalue\n\t\t\t\t__typename\n\t\t\t}\n\t\t\t__typename\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchCompetitionsWithResults(\n\t\t$type: [CompetitionType!]\n\t\t$area: AreaFilterInput\n\t\t$competitionStageType: [CompetitionStageType!]\n\t\t$competitionSeries: [String!]\n\t) {\n\t\tcompetitions(type: $type, area: $area, competitionSeriesSlug: $competitionSeries, first: 106) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tshortName\n\t\t\t\tarea {\n\t\t\t\t\tid\n\t\t\t\t\tslug\n\t\t\t\t\ttype\n\t\t\t\t\tshortName\n\t\t\t\t}\n\t\t\t\tcompetitionStages(type: $competitionStageType) {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\ttype\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstatistics {\n\t\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchCompetitionsWithResults(\n\t\t$type: [CompetitionType!]\n\t\t$area: AreaFilterInput\n\t\t$competitionStageType: [CompetitionStageType!]\n\t\t$competitionSeries: [String!]\n\t) {\n\t\tcompetitions(type: $type, area: $area, competitionSeriesSlug: $competitionSeries, first: 106) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tshortName\n\t\t\t\tarea {\n\t\t\t\t\tid\n\t\t\t\t\tslug\n\t\t\t\t\ttype\n\t\t\t\t\tshortName\n\t\t\t\t}\n\t\t\t\tcompetitionStages(type: $competitionStageType) {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\ttype\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstatistics {\n\t\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchCompetitor($owner: String, $competitionSeries: [String!]) {\n\t\tcompetitor(owner: $owner, competitionSeries: $competitionSeries) {\n\t\t\tid\n\t\t\toutcomes {\n\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\tvotes\n\t\t\t\t\tpercent\n\t\t\t\t\tletterVotes\n\t\t\t\t\tletterPercent\n\t\t\t\t\tmandate\n\t\t\t\t\tmandatePercent\n\t\t\t\t\tlistMandate\n\t\t\t\t\tlistMandatePercent\n\t\t\t\t\tindividualMandate\n\t\t\t\t\tindividualMandatePercent\n\t\t\t\t}\n\t\t\t}\n\t\t\towner {\n\t\t\t\tid\n\t\t\t\tslug\n\t\t\t\tcolor\n\t\t\t\tshortName\n\t\t\t\tname\n\t\t\t\t... on Organization {\n\t\t\t\t\trelatedCompetitors {\n\t\t\t\t\t\tid\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompetitionStages {\n\t\t\t\t\t\t\tcompetition {\n\t\t\t\t\t\t\t\tarea {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tlongName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmembers {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tphotoUrls\n\t\t\t\toutcome {\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tisWinner\n\t\t\t\t}\n\t\t\t}\n\t\t\tmarkerTeams {\n\t\t\t\tid\n\t\t\t\tslug\n\t\t\t\tcolor\n\t\t\t\tshortName\n\t\t\t\tname\n\t\t\t\t# ... on Organization {\n\t\t\t\t#   markedCompetitors(\n\t\t\t\t#     type: "person"\n\t\t\t\t#     competitionSeries: $competitionSeries\n\t\t\t\t#   ) {\n\t\t\t\t#     id\n\t\t\t\t#     order\n\t\t\t\t#     owner {\n\t\t\t\t#       ... on Human {\n\t\t\t\t#         id\n\t\t\t\t#         name\n\t\t\t\t#         photoUrls\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#     outcomes {\n\t\t\t\t#       ... on PersonListElcetionOutcome {\n\t\t\t\t#         isWinner\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#     markerTeams {\n\t\t\t\t#       id\n\t\t\t\t#       slug\n\t\t\t\t#       color\n\t\t\t\t#       shortName\n\t\t\t\t#       name\n\t\t\t\t#     }\n\t\t\t\t#     competitionStages {\n\t\t\t\t#       competition {\n\t\t\t\t#         area {\n\t\t\t\t#           id\n\t\t\t\t#           slug\n\t\t\t\t#           shortName\n\t\t\t\t#           longName\n\t\t\t\t#         }\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#   }\n\t\t\t\t# }\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchCompetitor($owner: String, $competitionSeries: [String!]) {\n\t\tcompetitor(owner: $owner, competitionSeries: $competitionSeries) {\n\t\t\tid\n\t\t\toutcomes {\n\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\tvotes\n\t\t\t\t\tpercent\n\t\t\t\t\tletterVotes\n\t\t\t\t\tletterPercent\n\t\t\t\t\tmandate\n\t\t\t\t\tmandatePercent\n\t\t\t\t\tlistMandate\n\t\t\t\t\tlistMandatePercent\n\t\t\t\t\tindividualMandate\n\t\t\t\t\tindividualMandatePercent\n\t\t\t\t}\n\t\t\t}\n\t\t\towner {\n\t\t\t\tid\n\t\t\t\tslug\n\t\t\t\tcolor\n\t\t\t\tshortName\n\t\t\t\tname\n\t\t\t\t... on Organization {\n\t\t\t\t\trelatedCompetitors {\n\t\t\t\t\t\tid\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\t\t\tisWinner\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompetitionStages {\n\t\t\t\t\t\t\tcompetition {\n\t\t\t\t\t\t\t\tarea {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tlongName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmembers {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tphotoUrls\n\t\t\t\toutcome {\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tisWinner\n\t\t\t\t}\n\t\t\t}\n\t\t\tmarkerTeams {\n\t\t\t\tid\n\t\t\t\tslug\n\t\t\t\tcolor\n\t\t\t\tshortName\n\t\t\t\tname\n\t\t\t\t# ... on Organization {\n\t\t\t\t#   markedCompetitors(\n\t\t\t\t#     type: "person"\n\t\t\t\t#     competitionSeries: $competitionSeries\n\t\t\t\t#   ) {\n\t\t\t\t#     id\n\t\t\t\t#     order\n\t\t\t\t#     owner {\n\t\t\t\t#       ... on Human {\n\t\t\t\t#         id\n\t\t\t\t#         name\n\t\t\t\t#         photoUrls\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#     outcomes {\n\t\t\t\t#       ... on PersonListElcetionOutcome {\n\t\t\t\t#         isWinner\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#     markerTeams {\n\t\t\t\t#       id\n\t\t\t\t#       slug\n\t\t\t\t#       color\n\t\t\t\t#       shortName\n\t\t\t\t#       name\n\t\t\t\t#     }\n\t\t\t\t#     competitionStages {\n\t\t\t\t#       competition {\n\t\t\t\t#         area {\n\t\t\t\t#           id\n\t\t\t\t#           slug\n\t\t\t\t#           shortName\n\t\t\t\t#           longName\n\t\t\t\t#         }\n\t\t\t\t#       }\n\t\t\t\t#     }\n\t\t\t\t#   }\n\t\t\t\t# }\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchContent($id: ID, $slug: String, $buckets: Mixed!, $date: Date) {\n    content(\n      id: $id\n      fromBucket: { column: SLUG, operator: IN, value: $buckets }\n      slug: $slug\n      publishedAt: $date\n    ) {\n      id\n      featuredImage {\n        ...MediaItemFields\n        ...ImageFields\n      }\n      # type\n      title\n      body\n      # bodyType\n      slug\n      excerpt\n      # publisher\n      publishedAt\n      createdAt\n      updatedAt\n      authors {\n        ...AuthorFields\n      }\n      # meta\n      categories {\n        ...TaxonomyFields\n      }\n      tags {\n        ...TaxonomyFields\n      }\n      ... on Article {\n        partners {\n          ...PartnerFields\n        }\n      }\n      collections {\n        ...TaxonomyFields\n        picture\n      }\n      bucket {\n        ...BucketFields\n      }\n      counters {\n        name\n        value\n      }\n      options {\n        id\n        key\n        value\n      }\n      url\n      ... on Article {\n        relatedArticles {\n          ...ContentAbstract\n        }\n      }\n      ... on LiveReport {\n        liveArticle {\n          ...ContentAbstract\n        }\n        link\n        highlighted\n      }\n      userHasAccess\n    }\n  }\n',
): (typeof documents)['\n  query fetchContent($id: ID, $slug: String, $buckets: Mixed!, $date: Date) {\n    content(\n      id: $id\n      fromBucket: { column: SLUG, operator: IN, value: $buckets }\n      slug: $slug\n      publishedAt: $date\n    ) {\n      id\n      featuredImage {\n        ...MediaItemFields\n        ...ImageFields\n      }\n      # type\n      title\n      body\n      # bodyType\n      slug\n      excerpt\n      # publisher\n      publishedAt\n      createdAt\n      updatedAt\n      authors {\n        ...AuthorFields\n      }\n      # meta\n      categories {\n        ...TaxonomyFields\n      }\n      tags {\n        ...TaxonomyFields\n      }\n      ... on Article {\n        partners {\n          ...PartnerFields\n        }\n      }\n      collections {\n        ...TaxonomyFields\n        picture\n      }\n      bucket {\n        ...BucketFields\n      }\n      counters {\n        name\n        value\n      }\n      options {\n        id\n        key\n        value\n      }\n      url\n      ... on Article {\n        relatedArticles {\n          ...ContentAbstract\n        }\n      }\n      ... on LiveReport {\n        liveArticle {\n          ...ContentAbstract\n        }\n        link\n        highlighted\n      }\n      userHasAccess\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchContents(\n\t\t$buckets: QueryContentsFromBucketWhereHasConditions\n\t\t$types: [ContentType!]\n\t\t$categories: QueryContentsHasCategoryWhereHasConditions\n\t\t$tags: QueryContentsHasTagWhereHasConditions\n\t\t$partners: QueryContentsHasPartnerWhereHasConditions\n\t\t$authors: QueryContentsByAuthorWhereHasConditions\n\t\t$option: ByOptionInput\n\t\t$date: QueryContentsByDateWhereConditions\n\t\t$before: String\n\t\t$after: String\n\t\t$limit: Int\n\t) {\n\t\tcontents(\n\t\t\tbefore: $before\n\t\t\tafter: $after\n\t\t\tfromBucket: $buckets\n\t\t\tbyType: $types\n\t\t\thasCategory: $categories\n\t\t\thasTag: $tags\n\t\t\thasPartner: $partners\n\t\t\tbyAuthor: $authors\n\t\t\tbyDate: $date\n\t\t\tbyOption: $option\n\t\t\torderBy: { column: PUBLISHED_AT, order: DESC }\n\t\t\tfirst: $limit\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\t...CursorPaginationInfoFields\n\t\t\t}\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\t...ContentAbstract\n\t\t\t\t\t... on Article {\n\t\t\t\t\t\tpartners {\n\t\t\t\t\t\t\t...PartnerFields\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchContents(\n\t\t$buckets: QueryContentsFromBucketWhereHasConditions\n\t\t$types: [ContentType!]\n\t\t$categories: QueryContentsHasCategoryWhereHasConditions\n\t\t$tags: QueryContentsHasTagWhereHasConditions\n\t\t$partners: QueryContentsHasPartnerWhereHasConditions\n\t\t$authors: QueryContentsByAuthorWhereHasConditions\n\t\t$option: ByOptionInput\n\t\t$date: QueryContentsByDateWhereConditions\n\t\t$before: String\n\t\t$after: String\n\t\t$limit: Int\n\t) {\n\t\tcontents(\n\t\t\tbefore: $before\n\t\t\tafter: $after\n\t\t\tfromBucket: $buckets\n\t\t\tbyType: $types\n\t\t\thasCategory: $categories\n\t\t\thasTag: $tags\n\t\t\thasPartner: $partners\n\t\t\tbyAuthor: $authors\n\t\t\tbyDate: $date\n\t\t\tbyOption: $option\n\t\t\torderBy: { column: PUBLISHED_AT, order: DESC }\n\t\t\tfirst: $limit\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\t...CursorPaginationInfoFields\n\t\t\t}\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\t...ContentAbstract\n\t\t\t\t\t... on Article {\n\t\t\t\t\t\tpartners {\n\t\t\t\t\t\t\t...PartnerFields\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchCounties {\n\t\tareas(first: 20, type: [COUNTY]) {\n\t\t\tdata {\n\t\t\t\t...AreaFields\n\t\t\t\tchilds(type: [CONSTITUENCY]) {\n\t\t\t\t\t...AreaFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchCounties {\n\t\tareas(first: 20, type: [COUNTY]) {\n\t\t\tdata {\n\t\t\t\t...AreaFields\n\t\t\t\tchilds(type: [CONSTITUENCY]) {\n\t\t\t\t\t...AreaFields\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchCup($cupId: ID, $slug: String) {\n    cup(id: $cupId, slug: $slug) {\n      id\n      name\n    }\n  }\n',
): (typeof documents)['\n  query fetchCup($cupId: ID, $slug: String) {\n    cup(id: $cupId, slug: $slug) {\n      id\n      name\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchDatasets($slug: String, $postProcessors: [String]) {\n    datasets(slug: $slug) {\n      title\n      body(postProcessor: $postProcessors)\n      id\n      updated_at\n    }\n  }\n',
): (typeof documents)['\n  query fetchDatasets($slug: String, $postProcessors: [String]) {\n    datasets(slug: $slug) {\n      title\n      body(postProcessor: $postProcessors)\n      id\n      updated_at\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchGroup($id: ID!) {\n\t\tcompetition(id: $id) {\n\t\t\t__typename\n\t\t\tid\n\t\t\tname\n\t\t\tstatistics {\n\t\t\t\t... on FootballCompetitionStatistics {\n\t\t\t\t\tstandings {\n\t\t\t\t\t\tdraw\n\t\t\t\t\t\tgoalDifference\n\t\t\t\t\t\tgoalsAgainst\n\t\t\t\t\t\tgoalsScored\n\t\t\t\t\t\tlost\n\t\t\t\t\t\tmatches\n\t\t\t\t\t\tpoints\n\t\t\t\t\t\tposition\n\t\t\t\t\t\trecentForm\n\t\t\t\t\t\tteam {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t}\n\t\t\t\t\t\twon\n\t\t\t\t\t\t__typename\n\t\t\t\t\t}\n\t\t\t\t\t__typename\n\t\t\t\t}\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchGroup($id: ID!) {\n\t\tcompetition(id: $id) {\n\t\t\t__typename\n\t\t\tid\n\t\t\tname\n\t\t\tstatistics {\n\t\t\t\t... on FootballCompetitionStatistics {\n\t\t\t\t\tstandings {\n\t\t\t\t\t\tdraw\n\t\t\t\t\t\tgoalDifference\n\t\t\t\t\t\tgoalsAgainst\n\t\t\t\t\t\tgoalsScored\n\t\t\t\t\t\tlost\n\t\t\t\t\t\tmatches\n\t\t\t\t\t\tpoints\n\t\t\t\t\t\tposition\n\t\t\t\t\t\trecentForm\n\t\t\t\t\t\tteam {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t}\n\t\t\t\t\t\twon\n\t\t\t\t\t\t__typename\n\t\t\t\t\t}\n\t\t\t\t\t__typename\n\t\t\t\t}\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchGroups($type: [CompetitionType!], $competitionSeries: [String!]) {\n\t\tcompetitions(type: $type, competitionSeriesSlug: $competitionSeries) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tstatistics {\n\t\t\t\t\t... on FootballCompetitionStatistics {\n\t\t\t\t\t\tstandings {\n\t\t\t\t\t\t\tdraw\n\t\t\t\t\t\t\tgoalDifference\n\t\t\t\t\t\t\tgoalsAgainst\n\t\t\t\t\t\t\tgoalsScored\n\t\t\t\t\t\t\tlost\n\t\t\t\t\t\t\tmatches\n\t\t\t\t\t\t\tpoints\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\trecentForm\n\t\t\t\t\t\t\twon\n\t\t\t\t\t\t\tteam {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twon\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchGroups($type: [CompetitionType!], $competitionSeries: [String!]) {\n\t\tcompetitions(type: $type, competitionSeriesSlug: $competitionSeries) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tstatistics {\n\t\t\t\t\t... on FootballCompetitionStatistics {\n\t\t\t\t\t\tstandings {\n\t\t\t\t\t\t\tdraw\n\t\t\t\t\t\t\tgoalDifference\n\t\t\t\t\t\t\tgoalsAgainst\n\t\t\t\t\t\t\tgoalsScored\n\t\t\t\t\t\t\tlost\n\t\t\t\t\t\t\tmatches\n\t\t\t\t\t\t\tpoints\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\trecentForm\n\t\t\t\t\t\t\twon\n\t\t\t\t\t\t\tteam {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twon\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchLivereportsStats($id: ID, $buckets: Mixed!, $after: String) {\n\t\tcontent(id: $id, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n\t\t\tid\n\t\t\t... on LiveArticle {\n\t\t\t\treports(\n\t\t\t\t\tafter: $after\n\t\t\t\t\torderBy: [{ column: PUBLISHED_AT, order: DESC }]\n\t\t\t\t\tcursorInclusive: true\n\t\t\t\t) @connection(key: "reportsStats") {\n\t\t\t\t\tpageInfo {\n\t\t\t\t\t\ttotal\n\t\t\t\t\t}\n\t\t\t\t\tliveReportsStats {\n\t\t\t\t\t\thighlighted\n\t\t\t\t\t\tlatestReport\n\t\t\t\t\t\tpostsBehindTheCursor\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchLivereportsStats($id: ID, $buckets: Mixed!, $after: String) {\n\t\tcontent(id: $id, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n\t\t\tid\n\t\t\t... on LiveArticle {\n\t\t\t\treports(\n\t\t\t\t\tafter: $after\n\t\t\t\t\torderBy: [{ column: PUBLISHED_AT, order: DESC }]\n\t\t\t\t\tcursorInclusive: true\n\t\t\t\t) @connection(key: "reportsStats") {\n\t\t\t\t\tpageInfo {\n\t\t\t\t\t\ttotal\n\t\t\t\t\t}\n\t\t\t\t\tliveReportsStats {\n\t\t\t\t\t\thighlighted\n\t\t\t\t\t\tlatestReport\n\t\t\t\t\t\tpostsBehindTheCursor\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment MainpageContentAbstractFields on Content {\n    id\n    ... on Article {\n      ...ContentAbstract\n    }\n    ... on LiveArticle {\n      reports(orderBy: { column: PUBLISHED_AT, order: DESC }) {\n        edges {\n          node {\n            id\n            url\n            title\n            link\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment MainpageContentAbstractFields on Content {\n    id\n    ... on Article {\n      ...ContentAbstract\n    }\n    ... on LiveArticle {\n      reports(orderBy: { column: PUBLISHED_AT, order: DESC }) {\n        edges {\n          node {\n            id\n            url\n            title\n            link\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchMainpage($id: ID, $slug: String, $blog: QueryMainpageFromBlogWhereHasConditions) {\n    mainpage(id: $id, slug: $slug, fromBlog: $blog) {\n      id\n      slug\n      layout {\n        id\n        name\n        sections {\n          id\n          name\n        }\n      }\n      items {\n        id\n        __typename\n        position\n        layoutSection {\n          id\n          name\n        }\n        display {\n          id\n          slug\n        }\n        options {\n          key\n          value\n        }\n        ... on MainpageItemWithContent {\n          featuredImage {\n            ...MediaItemFields\n            ...ImageFields\n          }\n          content {\n            ...MainpageContentAbstractFields\n          }\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query fetchMainpage($id: ID, $slug: String, $blog: QueryMainpageFromBlogWhereHasConditions) {\n    mainpage(id: $id, slug: $slug, fromBlog: $blog) {\n      id\n      slug\n      layout {\n        id\n        name\n        sections {\n          id\n          name\n        }\n      }\n      items {\n        id\n        __typename\n        position\n        layoutSection {\n          id\n          name\n        }\n        display {\n          id\n          slug\n        }\n        options {\n          key\n          value\n        }\n        ... on MainpageItemWithContent {\n          featuredImage {\n            ...MediaItemFields\n            ...ImageFields\n          }\n          content {\n            ...MainpageContentAbstractFields\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery FetchMandates($competitionSeries: [String!], $competitionStage: [CompetitionStageType!]) {\n\t\tlist: competitions(\n\t\t\ttype: ELECTION\n\t\t\tarea: { slug: "magyarorszag" }\n\t\t\tcompetitionSeriesSlug: $competitionSeries\n\t\t) {\n\t\t\tdata {\n\t\t\t\tcompetitionStages(type: $competitionStage) {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\ttype\n\t\t\t\t\t\tstartedAt\n\t\t\t\t\t\tendedAt\n\t\t\t\t\t\tstatistics {\n\t\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\t\tvoters\n\t\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\t\tvalidVotesPercentage\n\t\t\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\t\t\tinvalidVotesPercentage\n\t\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\t\tlistMandate\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery FetchMandates($competitionSeries: [String!], $competitionStage: [CompetitionStageType!]) {\n\t\tlist: competitions(\n\t\t\ttype: ELECTION\n\t\t\tarea: { slug: "magyarorszag" }\n\t\t\tcompetitionSeriesSlug: $competitionSeries\n\t\t) {\n\t\t\tdata {\n\t\t\t\tcompetitionStages(type: $competitionStage) {\n\t\t\t\t\tdata {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\ttype\n\t\t\t\t\t\tstartedAt\n\t\t\t\t\t\tendedAt\n\t\t\t\t\t\tstatistics {\n\t\t\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\t\t\tvoters\n\t\t\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\t\t\tvalidVotesPercentage\n\t\t\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\t\t\tinvalidVotesPercentage\n\t\t\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toutcomes {\n\t\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\t\t\tvotes\n\t\t\t\t\t\t\t\tmandate\n\t\t\t\t\t\t\t\tlistMandate\n\t\t\t\t\t\t\t\tpercent\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchMatch($id: ID, $slug: String) {\n\t\tcompetitionStage(id: $id, slug: $slug) {\n\t\t\tid\n\t\t\tname\n\t\t\tslug\n\t\t\tdescription\n\t\t\tcompetition {\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tdescription\n\t\t\t\tcompetitionSeries {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t}\n\t\t\tproperties {\n\t\t\t\t... on FootballCompetitionStageProperties {\n\t\t\t\t\tminutes\n\t\t\t\t\textraMinute\n\t\t\t\t\tstatus\n\t\t\t\t\taddedTimeSecondHalf\n\t\t\t\t\taddedTimeFirstHalf\n\t\t\t\t}\n\t\t\t}\n\t\t\tevents {\n\t\t\t\ttype\n\t\t\t\tparticipants {\n\t\t\t\t\trole\n\t\t\t\t\tparticipant {\n\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tproperties {\n\t\t\t\t\tkey\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\ttitle\n\t\t\t\t# happenedAt\n\t\t\t\tdescription\n\t\t\t}\n\t\t\tstatistics {\n\t\t\t\t... on FootballCompetitionStageStatistics {\n\t\t\t\t\tshotsTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsOngoal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsOffgoal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsBlocked {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tcorners {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tfreeKick {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\toffsides {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpassesPercentage {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpassesTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpossessiontime {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tattacksTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tattacksDangerous {\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t\tlocal\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\toutcomes {\n\t\t\t\t... on FootballGroupStageOutcome {\n\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\tscore\n\t\t\t\t\tformation\n\t\t\t\t\tcoach\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayers {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\tnumber\n\t\t\t\t\t\t\tformationPosition\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on FootballKnockOutStageOutcome {\n\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\tpenaltyScore\n\t\t\t\t\tscore\n\t\t\t\t\tformation\n\t\t\t\t\tcoach\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayers {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\tnumber\n\t\t\t\t\t\t\tformationPosition\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlinks {\n\t\t\t\tlink\n\t\t\t\tname\n\t\t\t}\n\t\t\tstartedAt\n\t\t\tendedAt\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchMatch($id: ID, $slug: String) {\n\t\tcompetitionStage(id: $id, slug: $slug) {\n\t\t\tid\n\t\t\tname\n\t\t\tslug\n\t\t\tdescription\n\t\t\tcompetition {\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tdescription\n\t\t\t\tcompetitionSeries {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t}\n\t\t\tproperties {\n\t\t\t\t... on FootballCompetitionStageProperties {\n\t\t\t\t\tminutes\n\t\t\t\t\textraMinute\n\t\t\t\t\tstatus\n\t\t\t\t\taddedTimeSecondHalf\n\t\t\t\t\taddedTimeFirstHalf\n\t\t\t\t}\n\t\t\t}\n\t\t\tevents {\n\t\t\t\ttype\n\t\t\t\tparticipants {\n\t\t\t\t\trole\n\t\t\t\t\tparticipant {\n\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tproperties {\n\t\t\t\t\tkey\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\ttitle\n\t\t\t\t# happenedAt\n\t\t\t\tdescription\n\t\t\t}\n\t\t\tstatistics {\n\t\t\t\t... on FootballCompetitionStageStatistics {\n\t\t\t\t\tshotsTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsOngoal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsOffgoal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tshotsBlocked {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tcorners {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tfreeKick {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\toffsides {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpassesPercentage {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpassesTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tpossessiontime {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tattacksTotal {\n\t\t\t\t\t\tlocal\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t}\n\t\t\t\t\tattacksDangerous {\n\t\t\t\t\t\tvisitor\n\t\t\t\t\t\tlocal\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\toutcomes {\n\t\t\t\t... on FootballGroupStageOutcome {\n\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\tscore\n\t\t\t\t\tformation\n\t\t\t\t\tcoach\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayers {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\tnumber\n\t\t\t\t\t\t\tformationPosition\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on FootballKnockOutStageOutcome {\n\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\tpenaltyScore\n\t\t\t\t\tscore\n\t\t\t\t\tformation\n\t\t\t\t\tcoach\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayers {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t\tnumber\n\t\t\t\t\t\t\tformationPosition\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlinks {\n\t\t\t\tlink\n\t\t\t\tname\n\t\t\t}\n\t\t\tstartedAt\n\t\t\tendedAt\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery fetchMatches(\n\t\t$competitionSeries: [String!]\n\t\t$first: Int\n\t\t$orderBy: [QueryCompetitionStagesOrderByOrderByClause!]\n\t\t$after: DateTimeTz\n\t) {\n\t\tcompetitionStages(\n\t\t\tcompetitionSeries: $competitionSeries\n\t\t\torderBy: $orderBy\n\t\t\tfirst: $first\n\t\t\tafter: $after\n\t\t) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tslug\n\t\t\t\tdescription\n\t\t\t\tcompetition {\n\t\t\t\t\tname\n\t\t\t\t\ttype\n\t\t\t\t\tdescription\n\t\t\t\t\tcompetitionSeries {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tproperties {\n\t\t\t\t\t... on FootballCompetitionStageProperties {\n\t\t\t\t\t\tminutes\n\t\t\t\t\t\textraMinute\n\t\t\t\t\t\tstatus\n\t\t\t\t\t\taddedTimeSecondHalf\n\t\t\t\t\t\taddedTimeFirstHalf\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutcomes {\n\t\t\t\t\t... on FootballGroupStageOutcome {\n\t\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\t\tscore\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on FootballKnockOutStageOutcome {\n\t\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\t\tpenaltyScore\n\t\t\t\t\t\tscore\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlinks {\n\t\t\t\t\tlink\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\tstartedAt\n\t\t\t\tendedAt\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery fetchMatches(\n\t\t$competitionSeries: [String!]\n\t\t$first: Int\n\t\t$orderBy: [QueryCompetitionStagesOrderByOrderByClause!]\n\t\t$after: DateTimeTz\n\t) {\n\t\tcompetitionStages(\n\t\t\tcompetitionSeries: $competitionSeries\n\t\t\torderBy: $orderBy\n\t\t\tfirst: $first\n\t\t\tafter: $after\n\t\t) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tslug\n\t\t\t\tdescription\n\t\t\t\tcompetition {\n\t\t\t\t\tname\n\t\t\t\t\ttype\n\t\t\t\t\tdescription\n\t\t\t\t\tcompetitionSeries {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tproperties {\n\t\t\t\t\t... on FootballCompetitionStageProperties {\n\t\t\t\t\t\tminutes\n\t\t\t\t\t\textraMinute\n\t\t\t\t\t\tstatus\n\t\t\t\t\t\taddedTimeSecondHalf\n\t\t\t\t\t\taddedTimeFirstHalf\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutcomes {\n\t\t\t\t\t... on FootballGroupStageOutcome {\n\t\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\t\tscore\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on FootballKnockOutStageOutcome {\n\t\t\t\t\t\tlocalOrVisitor\n\t\t\t\t\t\tpenaltyScore\n\t\t\t\t\t\tscore\n\t\t\t\t\t\tcompetitor {\n\t\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlinks {\n\t\t\t\t\tlink\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\tstartedAt\n\t\t\t\tendedAt\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchMediaItem($id: ID!) {\n    mediaItem(id: $id) {\n      ...MediaItemFields\n      ...ImageFields\n    }\n  }\n',
): (typeof documents)['\n  query fetchMediaItem($id: ID!) {\n    mediaItem(id: $id) {\n      ...MediaItemFields\n      ...ImageFields\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchPartner($slug: String, $buckets: Mixed!) {\n    partner(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...PartnerFields\n    }\n  }\n',
): (typeof documents)['\n  query fetchPartner($slug: String, $buckets: Mixed!) {\n    partner(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...PartnerFields\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query recommendation($bucket: QueryRecommendationFromBucketWhereHasConditions, $take: Int) {\n    recommendation(fromBucket: $bucket, take: $take) {\n      title\n      url\n      order\n    }\n  }\n',
): (typeof documents)['\n  query recommendation($bucket: QueryRecommendationFromBucketWhereHasConditions, $take: Int) {\n    recommendation(fromBucket: $bucket, take: $take) {\n      title\n      url\n      order\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchStream($except: StreamExcepts) {\n    stream(except: $except) {\n      articles {\n        ...ContentAbstract\n      }\n    }\n  }\n',
): (typeof documents)['\n  query fetchStream($except: StreamExcepts) {\n    stream(except: $except) {\n      articles {\n        ...ContentAbstract\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query fetchTag($slug: String, $buckets: Mixed!) {\n    tag(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...TaxonomyFields\n    }\n  }\n',
): (typeof documents)['\n  query fetchTag($slug: String, $buckets: Mixed!) {\n    tag(slug: $slug, fromBucket: { column: SLUG, operator: IN, value: $buckets }) {\n      ...TaxonomyFields\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tfragment AreaFields on Area {\n\t\tid\n\t\ttype\n\t\tslug\n\t\tshortName\n\t\tlongName\n\t\tproperties {\n\t\t\tkey\n\t\t\tvalue\n\t\t}\n\t}\n',
): (typeof documents)['\n\tfragment AreaFields on Area {\n\t\tid\n\t\ttype\n\t\tslug\n\t\tshortName\n\t\tlongName\n\t\tproperties {\n\t\t\tkey\n\t\t\tvalue\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment AuthorFields on Author {\n    id\n    name\n    avatar\n    # description\n    slug\n    # email\n    # state\n    # url\n  }\n',
): (typeof documents)['\n  fragment AuthorFields on Author {\n    id\n    name\n    avatar\n    # description\n    slug\n    # email\n    # state\n    # url\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment BucketFields on Bucket {\n    id\n    slug\n    name\n  }\n',
): (typeof documents)['\n  fragment BucketFields on Bucket {\n    id\n    slug\n    name\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tfragment CompetitionFields on Competition {\n\t\tid\n\t\tname\n\t\tshortName\n\t\ttype\n\t\tarea {\n\t\t\t...AreaFields\n\t\t\tparent(type: COUNTY) {\n\t\t\t\t...AreaFields\n\t\t\t}\n\t\t}\n\t\tcompetitionStages(type: $competitionStageType) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tstartedAt\n\t\t\t\tendedAt\n\t\t\t\toutcomes {\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\tid\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\tisWinner\n\t\t\t\t\t\tpercent\n\t\t\t\t\t\tvotes\n\t\t\t\t\t}\n\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\tmandate\n\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\tvotes\n\t\t\t\t\t\tpercent\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstatistics {\n\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\tvoters\n\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tfragment CompetitionFields on Competition {\n\t\tid\n\t\tname\n\t\tshortName\n\t\ttype\n\t\tarea {\n\t\t\t...AreaFields\n\t\t\tparent(type: COUNTY) {\n\t\t\t\t...AreaFields\n\t\t\t}\n\t\t}\n\t\tcompetitionStages(type: $competitionStageType) {\n\t\t\tdata {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tstartedAt\n\t\t\t\tendedAt\n\t\t\t\toutcomes {\n\t\t\t\t\tcompetitor {\n\t\t\t\t\t\tid\n\t\t\t\t\t\towner {\n\t\t\t\t\t\t\t... on Human {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tstageName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on Organization {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tslug\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\t\tphotoUrls\n\t\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmarkerTeams {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tshortName\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on ElectionOutcome {\n\t\t\t\t\t\tisWinner\n\t\t\t\t\t\tpercent\n\t\t\t\t\t\tvotes\n\t\t\t\t\t}\n\t\t\t\t\t... on ListElectionOutcome {\n\t\t\t\t\t\tmandate\n\t\t\t\t\t\tmandatePercent\n\t\t\t\t\t\tvotes\n\t\t\t\t\t\tpercent\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstatistics {\n\t\t\t\t\t... on ElectionCompetitionStageStatistics {\n\t\t\t\t\t\tvoters\n\t\t\t\t\t\tvotersAppeared\n\t\t\t\t\t\tvotersAppearedPercentage\n\t\t\t\t\t\tvotersAppearedPercentageTime\n\t\t\t\t\t\tballotPapers\n\t\t\t\t\t\tvalidVotes\n\t\t\t\t\t\tinvalidVotes\n\t\t\t\t\t\tprocessingPercentage\n\t\t\t\t\t\tprocessingPercentageTime\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment ContentAbstract on Content {\n    id\n    title\n    slug\n    featuredImage {\n      ...MediaItemFields\n      ...ImageFields\n    }\n    excerpt\n    publishedAt\n    createdAt\n    authors {\n      ...AuthorFields\n    }\n    categories {\n      ...TaxonomyFields\n    }\n    # Ez csak a content_type számolás miatt kell, ha az jön a backendtől, nem\n    # kell majd elkérni az összes taget\n    tags {\n      ...TaxonomyFields\n    }\n    collections {\n      ...TaxonomyFields\n      picture\n    }\n    bucket {\n      ...BucketFields\n    }\n    counters {\n      name\n      value\n    }\n    options {\n      key\n      value\n    }\n    ... on Article {\n      partners {\n        ...PartnerFields\n      }\n    }\n    url\n  }\n',
): (typeof documents)['\n  fragment ContentAbstract on Content {\n    id\n    title\n    slug\n    featuredImage {\n      ...MediaItemFields\n      ...ImageFields\n    }\n    excerpt\n    publishedAt\n    createdAt\n    authors {\n      ...AuthorFields\n    }\n    categories {\n      ...TaxonomyFields\n    }\n    # Ez csak a content_type számolás miatt kell, ha az jön a backendtől, nem\n    # kell majd elkérni az összes taget\n    tags {\n      ...TaxonomyFields\n    }\n    collections {\n      ...TaxonomyFields\n      picture\n    }\n    bucket {\n      ...BucketFields\n    }\n    counters {\n      name\n      value\n    }\n    options {\n      key\n      value\n    }\n    ... on Article {\n      partners {\n        ...PartnerFields\n      }\n    }\n    url\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment MediaItemFields on MediaItem {\n    id\n    caption\n    author\n    # uploader\n    url\n    creditType\n    sourceLink\n    bucket {\n      ...BucketFields\n    }\n  }\n',
): (typeof documents)['\n  fragment MediaItemFields on MediaItem {\n    id\n    caption\n    author\n    # uploader\n    url\n    creditType\n    sourceLink\n    bucket {\n      ...BucketFields\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment ImageFields on Image {\n    url\n    width\n    height\n    variations {\n      url\n      size\n      width\n      height\n    }\n  }\n',
): (typeof documents)['\n  fragment ImageFields on Image {\n    url\n    width\n    height\n    variations {\n      url\n      size\n      width\n      height\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment PageInfoFields on PageInfo {\n    count\n    currentPage\n    hasPreviousPage\n    hasNextPage\n    startCursor\n    endCursor\n  }\n',
): (typeof documents)['\n  fragment PageInfoFields on PageInfo {\n    count\n    currentPage\n    hasPreviousPage\n    hasNextPage\n    startCursor\n    endCursor\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment CursorPaginationInfoFields on CursorPaginationInfo {\n    count\n    endCursor\n    hasNextPage\n    hasPreviousPage\n    startCursor\n    total\n  }\n',
): (typeof documents)['\n  fragment CursorPaginationInfoFields on CursorPaginationInfo {\n    count\n    endCursor\n    hasNextPage\n    hasPreviousPage\n    startCursor\n    total\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment PartnerFields on Partner {\n    id\n    colors\n    description\n    picture\n    name\n    slug\n    tagline\n    url\n  }\n',
): (typeof documents)['\n  fragment PartnerFields on Partner {\n    id\n    colors\n    description\n    picture\n    name\n    slug\n    tagline\n    url\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  fragment TaxonomyFields on Taxonomy {\n    id\n    slug\n    name\n    description\n    url\n  }\n',
): (typeof documents)['\n  fragment TaxonomyFields on Taxonomy {\n    id\n    slug\n    name\n    description\n    url\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n  query getContentInviteToken($id: ID!) {\n    contentInviteToken(id: $id) {\n      inviteToken\n    }\n  }\n',
): (typeof documents)['\n  query getContentInviteToken($id: ID!) {\n    contentInviteToken(id: $id) {\n      inviteToken\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
	source: '\n\tquery search($query: String!, $buckets: QuerySearchFromBucketWhereHasConditions, $after: String) {\n\t\tsearch(type: [ARTICLE], query: $query, fromBucket: $buckets, after: $after) {\n\t\t\tpageInfo {\n\t\t\t\t...PageInfoFields\n\t\t\t}\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\t... on Article {\n\t\t\t\t\t\t...ContentAbstract\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery search($query: String!, $buckets: QuerySearchFromBucketWhereHasConditions, $after: String) {\n\t\tsearch(type: [ARTICLE], query: $query, fromBucket: $buckets, after: $after) {\n\t\t\tpageInfo {\n\t\t\t\t...PageInfoFields\n\t\t\t}\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\t... on Article {\n\t\t\t\t\t\t...ContentAbstract\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];

export function graphql(source: string) {
	return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
	TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
